// =============================================================================
// SCRIPT D'INITIALISATION BASE DE DONN√âES - ASSISTANTE BABOUNETTE
// =============================================================================

import { prisma } from '../lib/prisma';
import { ingredientService } from '../lib/services/ingredient-service';

// =============================================================================
// FONCTIONS D'INITIALISATION
// =============================================================================

/**
 * Initialise la base de donn√©es avec les donn√©es par d√©faut
 */
async function initializeDatabase() {
  try {
    console.log('üöÄ Initialisation de la base de donn√©es...');

    // V√©rifier la connexion
    const isConnected = await prisma.$queryRaw`SELECT 1`;
    if (!isConnected) {
      throw new Error('Impossible de se connecter √† la base de donn√©es');
    }
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Initialiser les ingr√©dients par d√©faut
    await ingredientService.initializeDefaultIngredients();

    // Cr√©er un utilisateur de test
    const testUser = await createTestUser();
    console.log(`‚úÖ Utilisateur de test cr√©√©: ${testUser.email}`);

    // Cr√©er quelques recettes de test
    await createTestRecipes(testUser.id);
    console.log('‚úÖ Recettes de test cr√©√©es');

    console.log('üéâ Initialisation termin√©e avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Cr√©e un utilisateur de test
 */
async function createTestUser() {
  const existingUser = await prisma.user.findUnique({
    where: { email: 'test@babounette.com' },
  });

  if (existingUser) {
    return existingUser;
  }

  const user = await prisma.user.create({
    data: {
      email: 'test@babounette.com',
      name: 'Utilisateur Test',
      preferences: {
        create: {
          dietaryRestrictions: ['vegetarian'],
          allergies: ['nuts'],
          cuisinePreferences: ['french', 'italian'],
          calorieTarget: 2000,
          proteinTarget: 150,
          carbTarget: 200,
          fatTarget: 65,
          cookingTime: 45,
          difficultyLevel: 'intermediate',
          servingsPerMeal: 4,
          budgetPerMeal: 15,
        },
      },
    },
  });

  return user;
}

/**
 * Cr√©e quelques recettes de test
 */
async function createTestRecipes(userId: string) {
  const recipes = [
    {
      title: 'Risotto aux Champignons',
      description: 'Un risotto cr√©meux aux champignons de Paris',
      instructions: [
        'Faire revenir les oignons dans l\'huile d\'olive',
        'Ajouter le riz et le faire toaster',
        'Verser le vin blanc et laisser absorber',
        'Ajouter le bouillon progressivement',
        'Ajouter les champignons et le parmesan',
      ],
      prepTime: 15,
      cookTime: 25,
      servings: 4,
      difficulty: 'intermediate',
      cuisine: 'italian',
      tags: ['vegetarian', 'creamy', 'comfort'],
      categories: ['main-dish', 'rice'],
      ingredients: [
        { ingredientId: await getIngredientId('Riz basmati'), quantity: 300, unit: 'g' },
        { ingredientId: await getIngredientId('Oignon'), quantity: 100, unit: 'g' },
        { ingredientId: await getIngredientId('Huile d\'olive'), quantity: 30, unit: 'ml' },
        { ingredientId: await getIngredientId('Sel'), quantity: 5, unit: 'g' },
      ],
    },
    {
      title: 'Salade C√©sar',
      description: 'Une salade C√©sar classique avec cro√ªtons maison',
      instructions: [
        'Pr√©parer la vinaigrette avec l\'ail et l\'anchois',
        'Faire griller les cro√ªtons',
        'M√©langer la laitue avec la vinaigrette',
        'Ajouter les cro√ªtons et le parmesan',
      ],
      prepTime: 20,
      cookTime: 10,
      servings: 2,
      difficulty: 'beginner',
      cuisine: 'french',
      tags: ['salad', 'quick', 'healthy'],
      categories: ['starter', 'salad'],
      ingredients: [
        { ingredientId: await getIngredientId('Laitue'), quantity: 200, unit: 'g' },
        { ingredientId: await getIngredientId('≈íuf'), quantity: 100, unit: 'g' },
        { ingredientId: await getIngredientId('Huile d\'olive'), quantity: 20, unit: 'ml' },
        { ingredientId: await getIngredientId('Sel'), quantity: 3, unit: 'g' },
      ],
    },
  ];

  for (const recipeData of recipes) {
    const existingRecipe = await prisma.recipe.findFirst({
      where: { title: recipeData.title, userId },
    });

    if (!existingRecipe) {
      await prisma.recipe.create({
        data: {
          ...recipeData,
          userId,
          ingredients: {
            create: recipeData.ingredients,
          },
        },
      });
      console.log(`‚úÖ Recette cr√©√©e: ${recipeData.title}`);
    }
  }
}

/**
 * R√©cup√®re l'ID d'un ingr√©dient par nom
 */
async function getIngredientId(name: string): Promise<string> {
  const ingredient = await prisma.ingredient.findUnique({
    where: { name },
  });

  if (!ingredient) {
    throw new Error(`Ingr√©dient non trouv√©: ${name}`);
  }

  return ingredient.id;
}

// =============================================================================
// EX√âCUTION
// =============================================================================

if (require.main === module) {
  initializeDatabase()
    .then(() => {
      console.log('‚úÖ Script d\'initialisation termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
} 