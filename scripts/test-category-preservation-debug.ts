// Test de d√©bogage pour la pr√©servation des cat√©gories
console.log("üß™ Test de d√©bogage pour la pr√©servation des cat√©gories :\n");

// Simulation de la base de donn√©es de gestion
const databaseItems = [
  { id: 1, name: "Papier toilette", completed: false, category: "Hygi√®ne" },
  { id: 2, name: "Lessive", completed: false, category: "Entretien" },
  { id: 3, name: "Dentifrice", completed: false, category: "Hygi√®ne" },
  { id: 4, name: "Coca Cola", completed: false, category: "Boissons" },
  { id: 5, name: "Chips", completed: false, category: "Snacks" }
];

// Simulation de l'historique manuel
const ingredientHistory = [
  { name: "Lait", category: "Produits Laitiers", lastUsed: Date.now(), usageCount: 3 },
  { name: "Pain", category: "C√©r√©ales et Pains", lastUsed: Date.now(), usageCount: 5 }
];

// Simulation de la base de donn√©es d'ingr√©dients
const INGREDIENT_DATABASE = {
  "Produits Laitiers": ["Lait", "Yaourt", "Fromage"],
  "C√©r√©ales et Pains": ["Pain", "Riz", "P√¢tes"],
  "Fruits et L√©gumes": ["Pommes", "Bananes", "Carottes"]
};

console.log("üìä Test de la g√©n√©ration des suggestions :");

// Simuler la g√©n√©ration des suggestions (comme dans useIngredientSuggestions)
const generateSuggestions = (searchTerm: string) => {
  const normalizedSearch = searchTerm.toLowerCase().trim();
  const allSuggestions: Array<{name: string, category: string, source: string}> = [];
  
  // Ajouter les ingr√©dients de la base de donn√©es
  Object.entries(INGREDIENT_DATABASE).forEach(([category, ingredients]) => {
    ingredients.forEach(ingredient => {
      if (ingredient.toLowerCase().includes(normalizedSearch)) {
        allSuggestions.push({
          name: ingredient,
          category,
          source: 'ingredients'
        });
      }
    });
  });
  
  // Ajouter les articles de la base de donn√©es de gestion
  databaseItems.forEach(item => {
    if (item.name.toLowerCase().includes(normalizedSearch)) {
      allSuggestions.push({
        name: item.name,
        category: item.category,
        source: 'database'
      });
    }
  });
  
  // Ajouter l'historique manuel
  ingredientHistory.forEach(item => {
    if (item.name.toLowerCase().includes(normalizedSearch)) {
      allSuggestions.push({
        name: item.name,
        category: item.category,
        source: 'history'
      });
    }
  });
  
  // D√©dupliquer
  const uniqueSuggestions = allSuggestions.filter((suggestion, index, self) => 
    index === self.findIndex(s => s.name === suggestion.name && s.category === suggestion.category)
  );
  
  // Trier par priorit√©
  const sortedSuggestions = uniqueSuggestions.sort((a, b) => {
    if (a.source === 'database' && b.source !== 'database') return -1;
    if (a.source !== 'database' && b.source === 'database') return 1;
    if (a.source === 'history' && b.source !== 'history') return -1;
    if (a.source !== 'history' && b.source === 'history') return 1;
    return a.name.localeCompare(b.name, 'fr');
  });
  
  return sortedSuggestions.slice(0, 20);
};

// Test avec diff√©rents termes de recherche
const testSearchTerms = [
  "papier",
  "lait",
  "coca",
  "chips",
  "dentifrice"
];

testSearchTerms.forEach(searchTerm => {
  console.log(`\nüîç Recherche pour "${searchTerm}" :`);
  const suggestions = generateSuggestions(searchTerm);
  
  if (suggestions.length > 0) {
    console.log(`  Suggestions trouv√©es :`);
    suggestions.forEach((suggestion, index) => {
      console.log(`    ${index + 1}. "${suggestion.name}" ‚Üí ${suggestion.category} (${suggestion.source})`);
    });
  } else {
    console.log(`  Aucune suggestion trouv√©e`);
  }
});

// Test de la logique de s√©lection
console.log("\nüîß Test de la logique de s√©lection :");

const testSelectionLogic = (selectedItem: string, selectedCategory: string = "") => {
  console.log(`\nüìù S√©lection de "${selectedItem}" (cat√©gorie s√©lectionn√©e: "${selectedCategory}")`);
  
  // Simuler la recherche dans les suggestions
  const suggestions = generateSuggestions(selectedItem);
  const existingSuggestion = suggestions.find(
    suggestion => suggestion.name.toLowerCase() === selectedItem.toLowerCase()
  );
  
  console.log(`  Recherche dans suggestions : ${suggestions.length} suggestions disponibles`);
  
  if (existingSuggestion) {
    console.log(`  ‚úÖ Suggestion trouv√©e : "${existingSuggestion.name}" ‚Üí ${existingSuggestion.category} (${existingSuggestion.source})`);
  } else {
    console.log(`  ‚ùå Aucune suggestion trouv√©e pour "${selectedItem}"`);
  }
  
  // D√©terminer la cat√©gorie finale
  let finalCategory = selectedCategory;
  if (!finalCategory && existingSuggestion) {
    finalCategory = existingSuggestion.category;
    console.log(`  üìå Cat√©gorie d√©termin√©e depuis les suggestions : "${finalCategory}"`);
  } else if (finalCategory) {
    console.log(`  üìå Cat√©gorie utilis√©e depuis la s√©lection : "${finalCategory}"`);
  } else {
    console.log(`  ‚ö†Ô∏è Aucune cat√©gorie d√©termin√©e`);
  }
  
  return finalCategory;
};

// Tests de s√©lection
const selectionTests = [
  {
    item: "Papier toilette",
    selectedCategory: "Hygi√®ne",
    expected: "Hygi√®ne",
    description: "Article de la base de donn√©es avec cat√©gorie s√©lectionn√©e"
  },
  {
    item: "Papier toilette",
    selectedCategory: "",
    expected: "Hygi√®ne",
    description: "Article de la base de donn√©es sans cat√©gorie s√©lectionn√©e"
  },
  {
    item: "Lait",
    selectedCategory: "",
    expected: "Produits Laitiers",
    description: "Article de l'historique sans cat√©gorie s√©lectionn√©e"
  },
  {
    item: "Coca Cola",
    selectedCategory: "",
    expected: "Boissons",
    description: "Article de la base de donn√©es sans cat√©gorie s√©lectionn√©e"
  }
];

selectionTests.forEach((test, index) => {
  console.log(`\n  ${index + 1}. ${test.description} :`);
  const result = testSelectionLogic(test.item, test.selectedCategory);
  
  if (result === test.expected) {
    console.log(`     ‚úÖ R√©sultat correct : "${result}"`);
  } else {
    console.log(`     ‚ùå R√©sultat incorrect : "${result}" (attendu: "${test.expected}")`);
  }
});

// Test de d√©bogage sp√©cifique
console.log("\nüêõ D√©bogage sp√©cifique :");

const debugSpecificCases = [
  {
    case: "Pourquoi 'Papier toilette' ne garde pas sa cat√©gorie ?",
    steps: [
      "1. Utilisateur tape 'papier'",
      "2. Suggestions incluent 'Papier toilette' de la base de donn√©es",
      "3. Utilisateur s√©lectionne 'Papier toilette'",
      "4. onSelectWithCategory devrait √™tre appel√© avec 'Hygi√®ne'",
      "5. selectedItemCategory devrait √™tre mis √† jour",
      "6. handleAddItem devrait utiliser cette cat√©gorie"
    ]
  }
];

debugSpecificCases.forEach((debugCase, index) => {
  console.log(`\n  ${index + 1}. ${debugCase.case}`);
  debugCase.steps.forEach(step => {
    console.log(`     ${step}`);
  });
});

console.log("\n‚úÖ Test de d√©bogage termin√© !");
console.log("\nüí° Points √† v√©rifier :");
console.log("  - Les suggestions incluent-elles bien les databaseItems ?");
console.log("  - onSelectWithCategory est-il appel√© correctement ?");
console.log("  - selectedItemCategory est-il mis √† jour ?");
console.log("  - handleAddItem utilise-t-il la bonne cat√©gorie ?"); 