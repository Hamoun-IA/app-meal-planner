// Test de l'autosuggestion avec la base de donn√©es de gestion
console.log("üß™ Test de l'autosuggestion avec la base de donn√©es de gestion :\n");

// Simulation de la base de donn√©es de gestion
const databaseItems = [
  { id: 1, name: "Papier toilette", completed: false, category: "Hygi√®ne" },
  { id: 2, name: "Lessive", completed: false, category: "Entretien" },
  { id: 3, name: "Dentifrice", completed: false, category: "Hygi√®ne" },
  { id: 4, name: "Shampooing", completed: false, category: "Hygi√®ne" },
  { id: 5, name: "Savon", completed: false, category: "Hygi√®ne" },
  { id: 6, name: "Coca Cola", completed: false, category: "Boissons" },
  { id: 7, name: "Chips", completed: false, category: "Snacks" },
  { id: 8, name: "Pain de mie", completed: false, category: "C√©r√©ales et Pains" }
];

// Simulation de l'historique manuel
const ingredientHistory = [
  { name: "Lait", category: "Produits Laitiers", lastUsed: Date.now(), usageCount: 3 },
  { name: "Pain", category: "C√©r√©ales et Pains", lastUsed: Date.now(), usageCount: 5 },
  { name: "Pommes", category: "Fruits et L√©gumes", lastUsed: Date.now(), usageCount: 2 }
];

// Simulation de la base de donn√©es d'ingr√©dients
const INGREDIENT_DATABASE = {
  "Fruits et L√©gumes": ["Pommes", "Bananes", "Carottes", "Tomates"],
  "Viandes et Poissons": ["Poulet", "B≈ìuf", "Saumon", "Thon"],
  "Produits Laitiers": ["Lait", "Yaourt", "Fromage", "Beurre"],
  "C√©r√©ales et Pains": ["Pain", "Riz", "P√¢tes", "Farine"],
  "Boissons": ["Eau", "Jus d'orange", "Caf√©", "Th√©"]
};

console.log("üìä Structure des donn√©es :");

console.log("\nüóÑÔ∏è Base de donn√©es de gestion :");
databaseItems.forEach((item, index) => {
  console.log(`  ${index + 1}. ${item.name} (${item.category})`);
});

console.log("\nüìù Historique manuel :");
ingredientHistory.forEach((item, index) => {
  console.log(`  ${index + 1}. ${item.name} (${item.category}) - Utilis√© ${item.usageCount}x`);
});

console.log("\nüçΩÔ∏è Base de donn√©es d'ingr√©dients :");
Object.entries(INGREDIENT_DATABASE).forEach(([category, ingredients]) => {
  console.log(`  ${category} : ${ingredients.join(", ")}`);
});

// Test de l'autosuggestion
console.log("\nüîç Test de l'autosuggestion :");

const testSearchTerms = [
  "papier",
  "hygi√®ne",
  "lait",
  "pain",
  "coca",
  "chips",
  "pommes"
];

testSearchTerms.forEach((searchTerm, index) => {
  console.log(`\n  ${index + 1}. Recherche : "${searchTerm}"`);
  
  // Simuler la logique de filtrage
  const normalizedSearch = searchTerm.toLowerCase().trim();
  
  // Articles de la base de donn√©es de gestion
  const databaseMatches = databaseItems.filter(item =>
    item.name.toLowerCase().includes(normalizedSearch)
  );
  
  // Articles de l'historique manuel
  const historyMatches = ingredientHistory.filter(item =>
    item.name.toLowerCase().includes(normalizedSearch)
  );
  
  // Articles de la base de donn√©es d'ingr√©dients
  const ingredientMatches = Object.values(INGREDIENT_DATABASE)
    .flat()
    .filter(ingredient => ingredient.toLowerCase().includes(normalizedSearch));
  
  console.log(`     Base de donn√©es : ${databaseMatches.map(item => item.name).join(", ") || "Aucun"}`);
  console.log(`     Historique : ${historyMatches.map(item => item.name).join(", ") || "Aucun"}`);
  console.log(`     Ingr√©dients : ${ingredientMatches.join(", ") || "Aucun"}`);
});

// Test de la priorit√©
console.log("\nüéØ Test de la priorit√© des suggestions :");

const priorityTest = {
  searchTerm: "lait",
  expectedOrder: [
    "Lait (Base de donn√©es de gestion - priorit√© 1)",
    "Lait (Historique manuel - priorit√© 2)",
    "Lait (Base d'ingr√©dients - priorit√© 3)"
  ]
};

console.log(`\n  Recherche : "${priorityTest.searchTerm}"`);
console.log("  Ordre de priorit√© attendu :");
priorityTest.expectedOrder.forEach((item, index) => {
  console.log(`    ${index + 1}. ${item}`);
});

// Test des cas d'usage
console.log("\nüë§ Cas d'usage :");

const useCases = [
  {
    scenario: "Utilisateur tape 'papier'",
    expected: "Papier toilette appara√Æt en premier (base de donn√©es)",
    advantage: "Acc√®s rapide aux articles g√©r√©s"
  },
  {
    scenario: "Utilisateur tape 'lait'",
    expected: "Lait appara√Æt avec sa cat√©gorie (historique + base)",
    advantage: "Suggestions enrichies par l'historique"
  },
  {
    scenario: "Utilisateur tape 'coca'",
    expected: "Coca Cola appara√Æt (base de donn√©es)",
    advantage: "Articles personnalis√©s disponibles"
  },
  {
    scenario: "Utilisateur tape 'pain'",
    expected: "Pain de mie et Pain apparaissent",
    advantage: "Combinaison base + historique"
  }
];

useCases.forEach((useCase, index) => {
  console.log(`\n  ${index + 1}. ${useCase.scenario} :`);
  console.log(`     R√©sultat attendu : ${useCase.expected}`);
  console.log(`     Avantage : ${useCase.advantage}`);
});

// Test des avantages
console.log("\nüí° Avantages de l'int√©gration :");

const advantages = [
  "Articles de la base de donn√©es disponibles en autosuggestion",
  "Priorit√© donn√©e aux articles g√©r√©s",
  "Suggestions enrichies par l'historique",
  "Acc√®s rapide aux articles personnalis√©s",
  "Interface unifi√©e pour tous les articles",
  "Exp√©rience utilisateur am√©lior√©e"
];

advantages.forEach((advantage, index) => {
  console.log(`  ${index + 1}. ‚úÖ ${advantage}`);
});

console.log("\n‚úÖ Test termin√© !");
console.log("\nüí° R√©sum√© de l'int√©gration :");
console.log("  - Base de donn√©es de gestion int√©gr√©e dans l'autosuggestion");
console.log("  - Priorit√© donn√©e aux articles g√©r√©s");
console.log("  - Suggestions enrichies et personnalis√©es");
console.log("  - Interface unifi√©e pour tous les articles"); 