// Test de la r√©cup√©ration des cat√©gories dans l'autosuggestion
console.log("üß™ Test de la r√©cup√©ration des cat√©gories dans l'autosuggestion :\n");

// Simulation de la base de donn√©es de gestion
const databaseItems = [
  { id: 1, name: "Papier toilette", completed: false, category: "Hygi√®ne" },
  { id: 2, name: "Lessive", completed: false, category: "Entretien" },
  { id: 3, name: "Dentifrice", completed: false, category: "Hygi√®ne" },
  { id: 4, name: "Shampooing", completed: false, category: "Hygi√®ne" },
  { id: 5, name: "Savon", completed: false, category: "Hygi√®ne" },
  { id: 6, name: "Coca Cola", completed: false, category: "Boissons" },
  { id: 7, name: "Chips", completed: false, category: "Snacks" },
  { id: 8, name: "Pain de mie", completed: false, category: "C√©r√©ales et Pains" }
];

// Simulation de l'historique manuel
const ingredientHistory = [
  { name: "Lait", category: "Produits Laitiers", lastUsed: Date.now(), usageCount: 3 },
  { name: "Pain", category: "C√©r√©ales et Pains", lastUsed: Date.now(), usageCount: 5 },
  { name: "Pommes", category: "Fruits et L√©gumes", lastUsed: Date.now(), usageCount: 2 }
];

// Simulation de la base de donn√©es d'ingr√©dients
const INGREDIENT_DATABASE = {
  "Fruits et L√©gumes": ["Pommes", "Bananes", "Carottes", "Tomates"],
  "Viandes et Poissons": ["Poulet", "B≈ìuf", "Saumon", "Thon"],
  "Produits Laitiers": ["Lait", "Yaourt", "Fromage", "Beurre"],
  "C√©r√©ales et Pains": ["Pain", "Riz", "P√¢tes", "Farine"],
  "Boissons": ["Eau", "Jus d'orange", "Caf√©", "Th√©"]
};

console.log("üìä Structure des donn√©es avec cat√©gories :");

console.log("\nüóÑÔ∏è Base de donn√©es de gestion :");
databaseItems.forEach((item, index) => {
  console.log(`  ${index + 1}. ${item.name} ‚Üí ${item.category}`);
});

console.log("\nüìù Historique manuel :");
ingredientHistory.forEach((item, index) => {
  console.log(`  ${index + 1}. ${item.name} ‚Üí ${item.category} (utilis√© ${item.usageCount}x)`);
});

console.log("\nüçΩÔ∏è Base de donn√©es d'ingr√©dients :");
Object.entries(INGREDIENT_DATABASE).forEach(([category, ingredients]) => {
  console.log(`  ${category} : ${ingredients.join(", ")}`);
});

// Test de la r√©cup√©ration des cat√©gories
console.log("\nüîç Test de la r√©cup√©ration des cat√©gories :");

const testSearchTerms = [
  "papier",
  "hygi√®ne",
  "lait",
  "pain",
  "coca",
  "chips",
  "pommes"
];

testSearchTerms.forEach((searchTerm, index) => {
  console.log(`\n  ${index + 1}. Recherche : "${searchTerm}"`);
  
  // Simuler la logique de filtrage avec cat√©gories
  const normalizedSearch = searchTerm.toLowerCase().trim();
  
  // Articles de la base de donn√©es de gestion avec cat√©gories
  const databaseMatches = databaseItems.filter(item =>
    item.name.toLowerCase().includes(normalizedSearch)
  ).map(item => ({ name: item.name, category: item.category, source: 'database' }));
  
  // Articles de l'historique manuel avec cat√©gories
  const historyMatches = ingredientHistory.filter(item =>
    item.name.toLowerCase().includes(normalizedSearch)
  ).map(item => ({ name: item.name, category: item.category, source: 'history' }));
  
  // Articles de la base de donn√©es d'ingr√©dients avec cat√©gories
  const ingredientMatches = Object.entries(INGREDIENT_DATABASE)
    .flatMap(([category, ingredients]) => 
      ingredients
        .filter(ingredient => ingredient.toLowerCase().includes(normalizedSearch))
        .map(ingredient => ({ name: ingredient, category, source: 'ingredients' }))
    );
  
  // Combiner et d√©dupliquer
  const allMatches = [...databaseMatches, ...historyMatches, ...ingredientMatches];
  const uniqueMatches = allMatches.filter((match, index, self) => 
    index === self.findIndex(m => m.name === match.name && m.category === match.category)
  );
  
  // Trier par priorit√©
  const sortedMatches = uniqueMatches.sort((a, b) => {
    // Priorit√© 1: Base de donn√©es de gestion
    if (a.source === 'database' && b.source !== 'database') return -1;
    if (a.source !== 'database' && b.source === 'database') return 1;
    
    // Priorit√© 2: Historique manuel
    if (a.source === 'history' && b.source !== 'history') return -1;
    if (a.source !== 'history' && b.source === 'history') return 1;
    
    // Priorit√© 3: Ordre alphab√©tique
    return a.name.localeCompare(b.name, 'fr');
  });
  
  console.log(`     R√©sultats avec cat√©gories :`);
  sortedMatches.forEach((match, matchIndex) => {
    console.log(`       ${matchIndex + 1}. ${match.name} ‚Üí ${match.category} (${match.source})`);
  });
});

// Test de la priorit√© des cat√©gories
console.log("\nüéØ Test de la priorit√© des cat√©gories :");

const priorityTest = {
  searchTerm: "lait",
  expectedResults: [
    { name: "Lait", category: "Produits Laitiers", source: "history" },
    { name: "Lait", category: "Produits Laitiers", source: "ingredients" }
  ]
};

console.log(`\n  Recherche : "${priorityTest.searchTerm}"`);
console.log("  R√©sultats attendus avec cat√©gories :");
priorityTest.expectedResults.forEach((result, index) => {
  console.log(`    ${index + 1}. ${result.name} ‚Üí ${result.category} (${result.source})`);
});

// Test des cas d'usage avec cat√©gories
console.log("\nüë§ Cas d'usage avec cat√©gories :");

const useCasesWithCategories = [
  {
    scenario: "Utilisateur tape 'papier'",
    expected: "Papier toilette ‚Üí Hygi√®ne (database)",
    advantage: "Cat√©gorie r√©cup√©r√©e de la base de donn√©es"
  },
  {
    scenario: "Utilisateur tape 'lait'",
    expected: "Lait ‚Üí Produits Laitiers (history + ingredients)",
    advantage: "Cat√©gorie r√©cup√©r√©e de l'historique"
  },
  {
    scenario: "Utilisateur tape 'coca'",
    expected: "Coca Cola ‚Üí Boissons (database)",
    advantage: "Cat√©gorie personnalis√©e r√©cup√©r√©e"
  },
  {
    scenario: "Utilisateur tape 'pain'",
    expected: "Pain de mie ‚Üí C√©r√©ales et Pains (database), Pain ‚Üí C√©r√©ales et Pains (history)",
    advantage: "Cat√©gories r√©cup√©r√©es de plusieurs sources"
  }
];

useCasesWithCategories.forEach((useCase, index) => {
  console.log(`\n  ${index + 1}. ${useCase.scenario} :`);
  console.log(`     R√©sultat attendu : ${useCase.expected}`);
  console.log(`     Avantage : ${useCase.advantage}`);
});

// Test des avantages de la r√©cup√©ration des cat√©gories
console.log("\nüí° Avantages de la r√©cup√©ration des cat√©gories :");

const advantages = [
  "Cat√©gories r√©cup√©r√©es de la base de donn√©es de gestion",
  "Cat√©gories r√©cup√©r√©es de l'historique manuel",
  "Cat√©gories r√©cup√©r√©es de la base d'ingr√©dients",
  "Priorit√© respect√©e dans l'affichage",
  "Interface utilisateur enrichie",
  "Exp√©rience utilisateur am√©lior√©e"
];

advantages.forEach((advantage, index) => {
  console.log(`  ${index + 1}. ‚úÖ ${advantage}`);
});

console.log("\n‚úÖ Test termin√© !");
console.log("\nüí° R√©sum√© de la r√©cup√©ration des cat√©gories :");
console.log("  - Cat√©gories r√©cup√©r√©es de toutes les sources");
console.log("  - Priorit√© respect√©e (database > history > ingredients)");
console.log("  - Interface enrichie avec les cat√©gories");
console.log("  - Exp√©rience utilisateur am√©lior√©e"); 