#!/bin/bash

# Script d'initialisation de la base de donn√©es
set -e

echo "üóÑÔ∏è Initialisation de la base de donn√©es..."

# Variables
PROJECT_NAME="meal-planner"

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Fonction de log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Attendre que PostgreSQL soit pr√™t
wait_for_postgres() {
    log "Attente de PostgreSQL..."
    until docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -U mealuser > /dev/null 2>&1; do
        sleep 2
    done
    log "‚úÖ PostgreSQL est pr√™t"
}

# Appliquer les migrations
apply_migrations() {
    log "Application des migrations Prisma..."
    
    # G√©n√©rer le client Prisma
    docker-compose -f docker-compose.prod.yml exec -T app npx prisma generate
    
    # Appliquer les migrations
    docker-compose -f docker-compose.prod.yml exec -T app npx prisma migrate deploy
    
    log "‚úÖ Migrations appliqu√©es"
}

# V√©rifier si la base de donn√©es est vide
check_database() {
    log "V√©rification de la base de donn√©es..."
    
    # Compter le nombre de tables
    table_count=$(docker-compose -f docker-compose.prod.yml exec -T postgres psql -U mealuser -d mealdb -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')
    
    if [ "$table_count" -eq "0" ]; then
        log "Base de donn√©es vide, initialisation..."
        return 0
    else
        log "Base de donn√©es contient $table_count tables"
        return 1
    fi
}

# Initialiser avec des donn√©es de base
seed_database() {
    log "Ajout de donn√©es de base..."
    
    # Cr√©er quelques cat√©gories de base
    docker-compose -f docker-compose.prod.yml exec -T postgres psql -U mealuser -d mealdb -c "
    INSERT INTO categories (id, name, \"linkedItemType\") VALUES 
    (gen_random_uuid(), 'L√©gumes', 'INGREDIENT'),
    (gen_random_uuid(), 'Viandes', 'INGREDIENT'),
    (gen_random_uuid(), 'Poissons', 'INGREDIENT'),
    (gen_random_uuid(), 'Fruits', 'INGREDIENT'),
    (gen_random_uuid(), '√âpices', 'INGREDIENT'),
    (gen_random_uuid(), 'Produits laitiers', 'INGREDIENT')
    ON CONFLICT (name) DO NOTHING;
    "
    
    log "‚úÖ Donn√©es de base ajout√©es"
}

# Fonction principale
main() {
    wait_for_postgres
    apply_migrations
    
    if check_database; then
        seed_database
    fi
    
    log "üéâ Initialisation de la base de donn√©es termin√©e!"
}

# Ex√©cution
main "$@" 